name: Deploy FilterFacts to Naver Cloud Kubernetes (Token-based)

on:
  push:
    branches:
      - main  # main 브랜치에 push될 때 자동 배포

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ 코드 체크아웃
      - name: Checkout source
        uses: actions/checkout@v4

      # 2️⃣ JDK 21 설정
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      # 3️⃣ Gradle 빌드
      - name: Build with Gradle
        run: |
          chmod +x gradlew
          ./gradlew clean build -x test

      # 4️⃣ Docker 이미지 빌드 및 푸시 (자동 버전 태그)
      - name: Build and Push Docker image
        run: |
          IMAGE=contest-cluster54-registry.kr.ncr.ntruss.com/filterfacts-backend
          TAG=$(date +'%Y%m%d-%H%M%S')
          echo "🚀 Building image with tag: $TAG"

          echo "${{ secrets.NCP_REGISTRY_PASSWORD }}" | docker login \
            -u "${{ secrets.NCP_REGISTRY_USERNAME }}" \
            --password-stdin contest-cluster54-registry.kr.ncr.ntruss.com

          docker build -t $IMAGE:$TAG -t $IMAGE:latest .
          docker push $IMAGE:$TAG
          docker push $IMAGE:latest

      # 5️⃣ IAM Authenticator 설치
      - name: Install Naver Cloud IAM Authenticator
        run: |
          ARCH=$(uname -m)
          if [ "$ARCH" = "x86_64" ]; then
            FILE_URL="https://github.com/NaverCloudPlatform/ncp-iam-authenticator/releases/download/v1.1.1/ncp-iam-authenticator_linux_amd64"
          elif [ "$ARCH" = "aarch64" ]; then
            FILE_URL="https://github.com/NaverCloudPlatform/ncp-iam-authenticator/releases/download/v1.1.1/ncp-iam-authenticator_linux_arm64"
          else
            echo "❌ Unsupported architecture: $ARCH"
            exit 1
          fi

          echo "📦 Downloading NCP IAM Authenticator..."
          curl -fL -o ncp-iam-authenticator ${FILE_URL}
          chmod +x ncp-iam-authenticator
          sudo mv ncp-iam-authenticator /usr/local/bin/
          ncp-iam-authenticator version

      # 6️⃣ Naver Cloud 설정 복원
      - name: Restore Naver Cloud config
        run: |
          mkdir -p $HOME/.ncloud
          echo "${{ secrets.NCP_CONFIG }}" | base64 --decode > $HOME/.ncloud/configure
          chmod 600 $HOME/.ncloud/configure
          echo "✅ ~/.ncloud/configure restored successfully!"

      # 7️⃣ kubeconfig 복원
      - name: Restore kubeconfig
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.NKS_KUBECONFIG1 }}" | base64 --decode > $HOME/.kube/config
          chmod 600 $HOME/.kube/config
          echo "✅ kubeconfig restored successfully"
          kubectl config get-contexts

      # 8️⃣ 토큰 테스트
      - name: Verify IAM Authenticator
        run: |
          ncp-iam-authenticator token --clusterUuid 8ecb23d9-10ef-4041-80ed-6f65f2e0f0c3 --region KR || echo "⚠️ Token test failed."

      # 9️⃣ PostgreSQL 배포
      - name: 🗄️ Deploy PostgreSQL to NKS
        run: |
          kubectl apply -f postgres-deploy.yaml --validate=false

      # 🔟 Redis 배포
      - name: 🚀 Deploy Redis to NKS
        run: |
          kubectl apply -f redis-deploy.yaml --validate=false

      # 11️⃣ Backend 배포 (자동 최신 태그 적용)
      - name: ☕ Deploy FilterFacts Backend to NKS
        run: |
          echo "☕ Deploying backend with latest tag..."
          TAG=$(date +'%Y%m%d-%H%M%S')
          kubectl set image deployment/f-f-backend \
            f-f-backend=contest-cluster54-registry.kr.ncr.ntruss.com/filterfacts-backend:$TAG \
            --record
          kubectl rollout status deployment/f-f-backend

      # 12️⃣ 배포 확인
      - name: ✅ Verify Deployment Status
        run: |
          kubectl get pods
          kubectl get svc
