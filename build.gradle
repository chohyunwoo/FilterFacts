plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.4'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    toolchain { languageVersion = JavaLanguageVersion.of(21) }
}

configurations {
    compileOnly { extendsFrom annotationProcessor }
}

repositories { mavenCentral() }

dependencies {
    // --- Spring ---
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'   // ✅ 추가

    // DB 드라이버 (둘 다 쓰지 않으면 하나만 남기세요)
    runtimeOnly 'org.postgresql:postgresql'

    // WebClient가 필요하면 유지 (없으면 삭제)
    implementation 'org.springframework.boot:spring-boot-starter-webflux'   // (선택)

    // Redis (리프레시 토큰 저장용, 선택)
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    // --- JWT (jjwt 0.11.5) ---
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly   'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly   'io.jsonwebtoken:jjwt-jackson:0.11.5'

    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // XML 관련은 필요할 때만 — Spring BOM이 버전 관리하니 명시 버전은 보통 불필요
    // implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml'
    // implementation 'jakarta.xml.bind:jakarta.xml.bind-api'
    // implementation 'org.glassfish.jaxb:jaxb-runtime'

    // Test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    implementation 'org.springframework.boot:spring-boot-starter-mail'
}

tasks.named('test') { useJUnitPlatform() }
